#
# Cargo Configuration for the https://github.com/rp-rs/rp-hal.git repository.
#
# You might want to make a similar file in your own repository if you are
# writing programs for Raspberry Pi microcontrollers.
#

[unstable]
build-std = ["core"]

[build]
# Set the default target to match the Cortex-M33 in the RP2350
target = "riscv32imac-unknown-none-elf"

# This is the soft-float ABI for RISC-V mode.
#
# Hazard 3 does not have an FPU and so float function arguments use integer
# registers.
[target.riscv32imac-unknown-none-elf]
# Pass some extra options to rustc, some of which get passed on to the linker.
#
# * linker argument --nmagic turns off page alignment of sections (which saves
#   flash space)
# * linker argument -Tmemory.x also tells the linker to use
#   `memory.x` as a linker script. This adds in RP2350 RISC-V specific
#   things that the riscv-rt crate's `link.x` requires and then includes
#   `link.x` automatically. This is the reverse of how we do it on Cortex-M.
# * linker argument -Tdefmt.x also tells the linker to use `defmt.x` as a
#   secondary linker script. This is required to make defmt_rtt work.
rustflags = [
    "-C", "link-arg=--nmagic",
    "-C", "link-arg=-Tmemory.x",
]

# Use picotool for loading.
#
# Load an elf, skipping unchanged flash sectors, verify it, and execute it

# Not supported yet in probe-rs
# runner = "probe-rs run --chip RP235x"

runner = "picotool load -u -v -x -t elf"
